# Spécifie la version de Docker Compose
version: "3"

# Définit les services qui composent votre application
services:
  # Service pour le serveur de configuration
  config-server:
    # Image Docker à utiliser
    image: springcommunity/spring-petclinic-config-server
    # Nom du conteneur
    container_name: config-server
    # Ressources à allouer au conteneur
    deploy:
      resources:
        limits:
          memory: 512M
    # Vérification de l'état de santé du conteneur
    healthcheck:
      test: ["CMD", "curl", "-I", "http://config-server:8888"]
      interval: 5s
      timeout: 5s
      retries: 10
    # Ports à exposer
    ports:
      - 8888:8888

  # Service pour le serveur de découverte
  discovery-server:
    image: springcommunity/spring-petclinic-discovery-server
    container_name: discovery-server
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://discovery-server:8761"]
      interval: 5s
      timeout: 3s
      retries: 10
    # Dépendances de ce service
    depends_on:
      - config-server
    ports:
      - 8761:8761

  # Service pour le service des clients
  customers-service:
    image: springcommunity/spring-petclinic-customers-service
    container_name: customers-service
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      - config-server
      - discovery-server
    ports:
      - 8081:8081

  # Service pour le service des visites
  visits-service:
    image: springcommunity/spring-petclinic-visits-service
    container_name: visits-service
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
        - config-server
        - discovery-server
    ports:
      - 8082:8082

  # Service pour le service des vétérinaires
  vets-service:
    image: springcommunity/spring-petclinic-vets-service
    container_name: vets-service
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      - config-server
      - discovery-server
    ports:
      - 8083:8083

  # Service pour le serveur d'API Gateway
  api-gateway:
    image: springcommunity/spring-petclinic-api-gateway
    container_name: api-gateway
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      - config-server
      - discovery-server
    ports:
      - 8080:8080

  # Service pour le serveur de traçage
  tracing-server:
    image: openzipkin/zipkin
    container_name: tracing-server
    deploy:
      resources:
        limits:
          memory: 512M
    # Variables d'environnement pour le conteneur
    environment:
      - JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -Djava.security.egd=file:/dev/./urandom
    ports:
      - 9411:9411

  # Service pour le serveur d'administration
  admin-server:
    image: springcommunity/spring-petclinic-admin-server
    container_name: admin-server
    deploy:
      resources:
        limits:
          memory: 512M
    depends_on:
      - config-server
      - discovery-server
    ports:
      - 9090:9090

  # Service pour le serveur Grafana
  grafana-server:
    build: ./docker/grafana
    container_name: grafana-server
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - 3000:3000

  # Service pour le serveur Prometheus
  prometheus-server:
    build: ./docker/prometheus
    container_name: prometheus-server
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - 9091:9090

  #Service pour lancer mon test d'intégration
  test_integration:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    container_name: test_integration
    depends_on:
      - config-server
      - discovery-server
    command: mvn test

  # test_unitaire_admin_server:
  #   build:
  #     context: .
  #     dockerfile: ./docker/Dockerfile.admin
  #   container_name: test_unitaire_admin_server
  #   depends_on:
  #     - config-server
  #     - discovery-server
  #   command: mvn test

  # test_unitaire_customers_service: 
  #   build:
  #     context: .
  #     dockerfile: ./docker/Dockerfile.customers
  #   container_name: test_unitaire_customers_service
  #   depends_on:
  #     - config-server
  #     - discovery-server
  #   command: mvn test

  test_quality:
    image: $DOCKER_REGISTRY/demo_petclinic_project_admin_server:$CI_COMMIT_SHORT_SHA #image docker correspondant à l'application
    container_name: test_quality #nom du conteneur
    depends_on: #les services dont dépend le conteneur
    - config-server
    - discovery-server
    command: mvn verify -PbuildDocker #commande à exécuter dans un conteneur