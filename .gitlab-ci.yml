image: docker:latest

stages:
 - build
 - docker_build
 - build_maven
 - test
 - package
 - quality
 - deploy

variables:
  DOCKER_DRIVER: overlay2 # Utilise le driver overlay2 pour Docker
  #Cette ligne définit la variable d'environnement DOCKER_DRIVER à overlay2. overlay2 est un type de stockage Docker qui est rapide et efficace. Docker utilise différents pilotes de stockage pour gérer les images et les conteneurs de Docker sur votre système Docker. overlay2 est généralement recommandé par Docker pour sa performance.

  DOCKER_USERNAME: "paul94400"
  DOCKER_PASSWORD: "Heden090313@2023"
  DOCKER_REGISTRY: paul94400/cda_projet_demo_petclinic

#Construire une image à partir du fichier Dockerfile.test
docker_build_job:
  stage: docker_build
  image: docker:latest
  services:
    - docker:dind
  script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  #echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin : Cette commande se connecte à Docker en utilisant le nom d'utilisateur et le mot de passe fournis dans les variables d'environnement DOCKER_USERNAME et DOCKER_PASSWORD.
  - docker build --no-cache -t $DOCKER_REGISTRY -f docker/Dockerfile.test . 
  - docker push $DOCKER_REGISTRY

cache:
  paths:
    - .m2/repository
  key: "$CI_JOB_NAME"
  policy: pull-push

debug_job:
  stage: build
  script:
    - echo "CI_JOB_NAME is $CI_JOB_NAME"
    - echo "CI_PROJECT_DIR is $CI_PROJECT_DIR"
    - echo "$DOCKER_USERNAME"
  image: eclipse-temurin:17-jdk

maven_build_job:
  stage: build_maven
  image: $DOCKER_REGISTRY
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
  - apt-get update && apt-get install -y docker-compose
  script:
    - docker-compose up -d --build
    - mvn clean install -DskipTests
  dependencies:
    - docker_build_job
  artifacts:
    paths:
      - spring-petclinic-admin-server/target/*.jar
      - spring-petclinic-customers-service/target/*.jar
      - spring-petclinic-config-server/target/*.jar
      - spring-petclinic-discovery-server/target/*.jar
      - spring-petclinic-vets-service/target/*.jar
      - spring-petclinic-visits-service/target/*.jar


# test_build_job:
#   stage: test
#   script:
#     - ./mvnw test
#       -Dhttps.protocols=TLSv1.2
#       -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
#       -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
#       -Dorg.slf4j.simpleLogger.showDateTime=true
#       -Djava.awt.headless=true
#       --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true
#   image: eclipse-temurin:17-jdk
#   dependencies:
#     - maven_build_job

# test_integration:
#   stage: test
#   image: $DOCKER_REGISTRY
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#   before_script:
#     - apt-get update && apt-get install -y docker-compose
#   script:
#     - docker-compose up test_integration
#   dependencies:
#     - maven_build_job

# unit_admin_test_job:
#   stage: test
#   image: $DOCKER_REGISTRY
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#   before_script:
#     - apt-get update && apt-get install -y docker-compose
#   script:
#     - docker-compose up test_unitaire_admin_server
#   dependencies:
#     - maven_build_job

# unit_customer_test_job:
#   stage: test
#   image: $DOCKER_REGISTRY
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#   before_script:
#     - apt-get update && apt-get install -y docker-compose
#   script:
#     - docker-compose up test_unitaire_customers_service
#   dependencies:
#     - maven_build_job


package_admin_server_job: # Nom du job
  stage: package # Étape du pipeline à laquelle ce job appartient
  image: $DOCKER_REGISTRY # Image Docker à utiliser pour ce job
  services:
    - docker:dind # Service Docker à utiliser pour ce job (docker dans docker)
  variables:
    DOCKER_HOST: tcp://docker:2375  # Variable d'environnement pour spécifier l'hôte Docker
    ARTIFACT_NAME: spring-petclinic-admin-server # Variable d'environnement pour spécifier le nom de l'artefact
  dependencies:
    - maven_build_job # Ce job dépend du job maven_build_job
  script:
    - 'echo "Building Docker image for admin server"'
    - 'ls -lah'
    - 'docker build --build-arg ARTIFACT_NAME=${ARTIFACT_NAME} -f docker/Dockerfile -t $DOCKER_REGISTRY/demo_petclinic_project_admin_server:$CI_COMMIT_SHORT_SHA .'
    - 'docker push $DOCKER_REGISTRY/demo_petclinic_project_admin_server:$CI_COMMIT_SHORT_SHA'
  only:
    - main
      

quality_job_admin_server:
  stage: quality # Étape du pipeline à laquelle ce job appartient
  image: $DOCKER_REGISTRY/demo_petclinic_project_admin_server:$CI_COMMIT_SHORT_SHA # Image Docker à utiliser pour ce job qui correspond à l'image construite dans le job package_admin_server_job
  services:
    - docker:dind # Service Docker à utiliser pour ce job (docker dans docker)
  variables:
    DOCKER_HOST: tcp://docker:2375 # Variable d'environnement pour spécifier l'hôte Docker
  before_script:
    - 'echo "Running quality checks for admin server"' # Affiche un message avant l'exécution du script
    - apt-get update && apt-get install -y docker-compose # Installe docker-compose
  script:
    - echo "Running quality checks for admin server"
    - docker-compose up test_quality
  dependencies:
    - package_admin_server_job # Ce job dépend du job package_admin_server_job
    - maven_build_job # Ce job dépend du job maven_build_job
  only:
    - main # Ce job ne s'exécute que pour les commits sur la branche main


deploy_staging:
  stage: deploy
  image: $DOCKER_REGISTRY/demo_petclinic_project_admin_server:$CI_COMMIT_SHORT_SHA
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - apt-get update && apt-get install -y docker-compose
  script:
    - docker-compose -f docker-compose-staging.yml up -d build # Déploie l'application sur l'environnement de staging
  environment:
    name: staging #Nom de l'environnement
  dependencies: # Dépendances du job
    - quality_job_admin_server
    - docker_build_job
  only:
    - main