stages:
 - build
 - docker_build
 - build_maven
 - test 

variables:
  DOCKER_DRIVER: overlay2 # Utilise le driver overlay2 pour Docker
  #Cette ligne définit la variable d'environnement DOCKER_DRIVER à overlay2. overlay2 est un type de stockage Docker qui est rapide et efficace. Docker utilise différents pilotes de stockage pour gérer les images et les conteneurs de Docker sur votre système Docker. overlay2 est généralement recommandé par Docker pour sa performance.

  DOCKER_USERNAME: "paul94400"
  DOCKER_PASSWORD: "Heden090313@2023"
  DOCKER_REGISTRY: paul94400/cda_projet_demo_petclinic

#Construire une image à partir du fichier Dockerfile.test
docker_build_job:
  stage: docker_build
  image: docker:latest
  services:
    - docker:dind
  script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  #echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin : Cette commande se connecte à Docker en utilisant le nom d'utilisateur et le mot de passe fournis dans les variables d'environnement DOCKER_USERNAME et DOCKER_PASSWORD.
  - docker build --no-cache -t $DOCKER_REGISTRY -f docker/Dockerfile.test . 
  - docker push $DOCKER_REGISTRY

cache:
  paths:
    - .m2/repository
  key: "$CI_JOB_NAME"
  policy: pull-push

debug_job:
  stage: build
  script:
    - echo "CI_JOB_NAME is $CI_JOB_NAME"
    - echo "CI_PROJECT_DIR is $CI_PROJECT_DIR"
    - echo "$DOCKER_USERNAME"
  image: eclipse-temurin:17-jdk

maven_build_job:
  stage: build_maven
  image: $DOCKER_REGISTRY
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
  - apt-get update && apt-get install -y docker-compose
  script:
    - docker-compose up -d --build
    - ./mvnw clean package -DskipTests=true 
  dependencies:
    - docker_build_job
  artifacts:
    paths:
      - target/*.jar

test_build_job:
  stage: test
  script:
    - ./mvnw test
      -Dhttps.protocols=TLSv1.2
      -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
      -Dorg.slf4j.simpleLogger.showDateTime=true
      -Djava.awt.headless=true
      --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true
  image: eclipse-temurin:17-jdk
  dependencies:
    - maven_build_job

test_integration:
  stage: test
  image: $DOCKER_REGISTRY
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - apt-get update && apt-get install -y docker-compose
  script:
    - docker-compose up --build test_integration
  dependencies:
    - maven_build_job
